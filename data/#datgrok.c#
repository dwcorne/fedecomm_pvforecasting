#include <stdio.h>
#include <stdlib.h>
#include <time.h>
#include <string.h>
#include <math.h>

typedef struct record {

  int type; // 0 includes capri data on the hour,
             // 1 capri data off the hour unchanged
             // 2 capri data off the hour plus site data
             // 3 as 2 but capri data interpolated
             // -1 unpopulated
  
  int y, m, d, h, min;
  int plus_hours; // hrs past UTC
  double temp, humi, prec, pres, clou, srad, seng, uvin, pv;
  //  datetime temp humidity precipprob sealevelpressure cloudcover solarradiation solarenergy uvindex
} RECORD;

RECORD records[73000];
int nrecords = 0;

int init_record(RECORD *rp);
int add_time1(RECORD *rp, char *t, int foff);
int add_bits(RECORD *rp, int n);
int fixmonthday(RECORD *rp);
int site(char *fname);
int ccetc(char *fname);
int show_record(int ri, RECORD *rp);
int find_record(char *t, int *startsearch);
int further_populate(int ri, char *t, double pv);
int ootiate(char *oname, char horq);

int main(int argc, char **argv)
{

  
  ccetc(argv[1]);

  int i;
  for(i=0;i<nrecords;i++)
    {
      RECORD *rp = &records[i];
      show_record(i, rp);
    }
    
  
  site(argv[2]);

  ootiate(argv[3], argv[4][0]);

}

int ootiate(char *oname, char horq)
{
  int i;
  char tr[100], te[100];
  sprintf(tr,"train_%s", oname);
  sprintf(te,"test_%s", oname);  
  
  RECORD *rp;
    
  FILE *f = fopen(tr,"w");
  fprintf(f,"datetime,cloudcover,output\n");
  for(i=0;i<nrecords;i++)
    {
      rp = &records[i];
      if(rp->y>2022) continue;
      if((horq=='h') && (rp->min !=0)) continue;

      //      1998-01-01T24:00:00-10:00
      fprintf(f,"%d-%02d-%02dT%02d:%02d:00+%02d:00,%f, %f\n",
	     rp->y, rp->m, rp->d, rp->h, rp->min, rp->plus_hours, rp->clou,rp->pv); // HACK for positive hrs - east of Greenwich
    }
  fclose(f);

  f = fopen(te,"w");
  fprintf(f,"datetime,cloudcover,output\n");
  for(i=0;i<nrecords;i++)
    {
      rp = &records[i];
      if(rp->y<2023) continue;
      if((horq=='h') && (rp->min !=0)) continue;

      //      1998-01-01T24:00:00-10:00
      fprintf(f,"%d-%02d-%02dT%02d:%02d:00+%02d:00,%f, %f\n",
	     rp->y, rp->m, rp->d, rp->h, rp->min, rp->plus_hours, rp->clou,rp->pv); // HACK for positive hrs - east of Greenwich
    }
  fclose(f);  

  
}


int show_record(int ri, RECORD *rp)
{

  printf("record %d: %d %02d %02d %02d:%02d  %f  %f\n", ri, rp->y, rp->m, rp->d, rp->h, rp->min, rp->srad, rp->clou);
    
}


/****************************************************************************************************\
  2023-11-15 09:30:00+01:00 0 9.292
  2023-11-15 09:45:00+01:00 0 10.28
  2023-11-15 10:00:00+01:00 0 11.200000000000001
  2023-11-15 10:15:00+01:00 0 12.016

\****************************************************************************************************/
int site(char *fname)
{
  int i, r, ri, latest = 0;
  char instr[100];
  FILE *f = fopen(fname,"r");
  RECORD *rp;
  char t[30];
  
  while(1)
    {
      r = fscanf(f,"%s",instr);
      if(r<1) break;

      strcpy(t,instr);
      fscanf(f,"%s",instr);
      strcat(t," ");
      strcat(t,instr);

      ri = find_record(t,&latest);

      if(ri>=0)
	show_record(ri, &records[ri]);


      fscanf(f,"%s",instr); // throwaway
      fscanf(f,"%s",instr);
      double  pv = atof(instr);
      if(ri<0) continue;

      further_populate(ri,t,pv);
      printf(".....t is %s  -- latest is %d  with %f\n", t, latest, pv);      
    }
      

  ;
}


/****************************************************************************************************\
   2023-05-25 12:45:00+02:00
   0123456789012345678901234
\****************************************************************************************************/
int further_populate(int ri, char *t, double pv)
{
  printf("further populating: ");
  show_record(ri, &records[ri]);

  RECORD *rp = &records[ri];
  rp->pv = pv;

  char ph[3];
  ph[0] = t[20];   ph[1] = t[21];  ph[2] = '\0';
  rp->plus_hours = atoi(ph);
  printf("============================== %s %d  %f\n", t, rp->plus_hours, pv);  
}

int find_record(char *t, int *startsearch)
{

  printf("-----------  t is %s  with startsearch %d\n", t, *startsearch);
  char y[5];
  y[0] = t[0];   y[1] = t[1];   y[2] = t[2];   y[3] = t[3];   y[4] = '\0';
  int yi = atoi(y);
  char m[3];
  m[0] = t[5];   m[1] = t[6];   m[2] = '\0';
  int mi = atoi(m);
  char d[3];
  d[0] = t[8];   d[1] = t[9];   d[2] = '\0';
  int di = atoi(d);
  char h[3];
  h[0] = t[11];   h[1] = t[12];   h[2] = '\0';
  int hi = atoi(h);
  char n[3];
  n[0] = t[14];   n[1] = t[15];   n[2] = '\0';
  int ni = atoi(n);      

  int i, ss = *startsearch, found = 0;
  RECORD *rp;

  printf("-----------  picked up %d %d %d %d %d ",yi, mi, di, hi,ni);
  
  for(i=ss;i<nrecords;i++)
    {
      rp = &records[i];
      if(rp->y != yi) continue;
      if(rp->m != mi) continue;      
      if(rp->d != di) continue;
      if(rp->h != hi) continue;
      if(rp->min != ni) continue;
      found = 1;
      break;
    }

  if(found==0)
    {printf("no findy %s\n", t);  return -10;}
  
  *startsearch = i;
  return i;

}

int ccetc(char *fname)
{
  int i, r;
  char instr[100];
  FILE *f = fopen(fname,"r");
  RECORD *rp;
  
  while(1)
    {
      r = fscanf(f,"%s",instr);
      ixcxf(r<1) break;
      rp = &records[nrecords++];
      init_record(rp);
      add_time1(rp,instr,-3);
      rp = &records[nrecords++];
      init_record(rp);
      add_time1(rp,instr,-2);
      rp = &records[nrecords++];
      init_record(rp);
      add_time1(rp,instr,-1);
      rp = &records[nrecords++];
      init_record(rp);
      add_time1(rp,instr,0);      

      fscanf(f,"%s",instr); rp->temp = atof(instr);
      fscanf(f,"%s",instr); rp->humi = atof(instr);
      fscanf(f,"%s",instr); rp->prec = atof(instr);
      fscanf(f,"%s",instr); rp->pres = atof(instr);
      fscanf(f,"%s",instr); rp->clou = atof(instr);                        
      fscanf(f,"%s",instr); rp->srad = atof(instr);
      fscanf(f,"%s",instr); rp->seng = atof(instr);      
      fscanf(f,"%s",instr); rp->uvin = atof(instr);

      add_bits(rp,nrecords);
    }

  fclose(f);
  
}

/****************************************************************************************************\
    rp is &records[n-1];  
    we want to copy all the weather bits to n-2, n-3 and n-4
\****************************************************************************************************/
int add_bits(RECORD *rp, int n)
{
  RECORD *rpto;
  int i;

  for(i=2;i<=4;i++)
    {
      rpto = &records[n-i];
      rpto->temp = rp->temp;
      rpto->humi = rp->humi;
      rpto->prec = rp->prec;
      rpto->pres = rp->pres;
      rpto->clou = rp->clou;
      rpto->srad = rp->srad;
      rpto->seng = rp->seng;
      rpto->uvin = rp->uvin;      
    }

}

int init_record(RECORD *rp)
{
  rp->type = -1; // unpopulated

}
/****************************************************************************************************\
   this format 2022-01-01T19:00:00 
               0123456789012345678
\****************************************************************************************************/
int add_time1(RECORD *rp, char *t, int foff)
{

  char y[5];
  y[0] = t[0];   y[1] = t[1];   y[2] = t[2];   y[3] = t[3];   y[4] = '\0';
  rp->y = atoi(y);
  char m[3];
  m[0] = t[5];   m[1] = t[6];   m[2] = '\0';
  rp->m = atoi(m);
  char d[3];
  d[0] = t[8];   d[1] = t[9];   d[2] = '\0';
  rp->d = atoi(d);
  char h[3];
  h[0] = t[11];   h[1] = t[12];   h[2] = '\0';
  rp->h = atoi(h);    

  rp->min = 0;
  
  if(foff == 0){return 1;}

  if(rp->h>0)
    {
      rp->h--;
      rp->min = 60 + foff*15;
      return -1;
    }
  // if here, h is zero, so we go day before

  rp->h = 23;
  rp->min = 60 +  foff*15;

  if(rp->d==1)
    {
      fixmonthday(rp);
    }
  else rp->d--;
}

int fixmonthday(RECORD *rp)
{
  if(rp->m == 1)
    {
      rp->m = 12;
      rp->d = 31;
      rp->y--;
    }
  else
    {
      rp->m--;
      if(rp->m == 1)
	{
	  rp->d = 31;
	}
      else if(rp->m==2)
	{
	  rp->d = 28;
	}
      else if(rp->m==3)
	{
	  rp->d = 31;
	}
      else if(rp->m==4)
	{
	  rp->d = 30;
	}

      else if(rp->m==5)
	{
	  rp->d = 31;
	}
      else if(rp->m==6)
	{
	  rp->d = 30;
	}
      else if(rp->m==7)
	{
	  rp->d = 31;
	}
      else if(rp->m==8)
	{
	  rp->d = 31;
	}
      else if(rp->m==9)
	{
	  rp->d = 30;
	}

      else if(rp->m==10)
	{
	  rp->d = 31;
	}

      else if(rp->m==11)
	{
	  rp->d = 30;
	}
    }
}
